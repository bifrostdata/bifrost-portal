name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: bifrostdata/bifrost-portal

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test & Quality Check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check for security vulnerabilities
      run: |
        # Check for vulnerabilities first
        npm audit --audit-level=moderate || true

        # Auto-fix non-breaking vulnerabilities
        npm audit fix || true    - name: Run ESLint

    - name: Run type checking
      run: npm run type-check

    - name: Run tests
      run: npm test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  security:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        # Check for vulnerabilities first
        npm audit --audit-level=moderate || true

        # Auto-fix non-breaking vulnerabilities
        npm audit fix || true

        # Final check for high/critical issues
        npm audit --audit-level=high || echo "High/critical vulnerabilities found - review required"

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    name: Build & Push Container
    permissions:
      contents: read
      packages: write
      security-events: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          BUILD_REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-dev:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest
    name: Deploy to Development
    environment:
      name: development
      url: https://portal-dev.bifrost.eu

    steps:
    - name: Checkout configs repo
      uses: actions/checkout@v4
      with:
        repository: bifrostdata/bifrost-configs
        token: ${{ secrets.GITOPS_TOKEN }}
        path: configs

    - name: Update image tag in dev
      run: |
        cd configs
        # Extract short SHA from image tag
        IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tag }}" | grep -o 'main-[a-f0-9]\{7\}' | head -1)
        if [ -z "$IMAGE_TAG" ]; then
          IMAGE_TAG="dev-latest"
        fi

        # Update ArgoCD application
        sed -i "s|value: dev-latest|value: $IMAGE_TAG|g" apps/dev/portal.yaml

        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add apps/dev/portal.yaml
        git commit -m "ðŸš€ Deploy bifrost-portal $IMAGE_TAG to dev" || exit 0
        git push

  deploy-prod:
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    needs: build
    runs-on: ubuntu-latest
    name: Deploy to Production
    environment:
      name: production
      url: https://portal.bifrost.eu

    steps:
    - name: Checkout configs repo
      uses: actions/checkout@v4
      with:
        repository: bifrostdata/bifrost-configs
        token: ${{ secrets.GITOPS_TOKEN }}
        path: configs

    - name: Update image tag in production
      run: |
        cd configs
        TAG_NAME=${GITHUB_REF#refs/tags/}

        # Update ArgoCD application
        sed -i "s|value: v.*|value: $TAG_NAME|g" apps/prod/portal.yaml

        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add apps/prod/portal.yaml
        git commit -m "ðŸš€ Deploy bifrost-portal $TAG_NAME to production"
        git push
